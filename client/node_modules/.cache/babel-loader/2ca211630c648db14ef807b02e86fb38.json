{"ast":null,"code":"import firebase from \"firebase/app\";\nimport \"firebase/firestore\";\nimport \"firebase/auth\";\nconst config = {\n  apiKey: \"AIzaSyDzgZErucP_p3Rs4ilRpplnbsH-0Lj0_QA\",\n  authDomain: \"e-commerce-shop-dc68b.firebaseapp.com\",\n  databaseURL: \"https://e-commerce-shop-dc68b.firebaseio.com\",\n  projectId: \"e-commerce-shop-dc68b\",\n  storageBucket: \"e-commerce-shop-dc68b.appspot.com\",\n  messagingSenderId: \"950147081480\",\n  appId: \"1:950147081480:web:0cc1a095a0414651c2b8bd\",\n  measurementId: \"G-SJCNTMC2N4\"\n};\nfirebase.initializeApp(config);\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return;\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n  const collectionRef = firestore.collection(\"users\");\n  const collectionSnapshot = await collectionRef.get();\n  const snapShot = await userRef.get();\n  console.log({\n    collection: collectionSnapshot.docs.map(doc => doc.data())\n  });\n\n  if (!snapShot.exists) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...additionalData\n      });\n    } catch (error) {\n      console.log(\"error creating user\", error.message);\n    }\n  }\n\n  return userRef;\n};\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nexport const addCollectionAndDocuments = (collectionKey, objectsToAdd) => {\n  const collectionRef = firestore.collection(collectionKey);\n  console.log();\n};\nconst provider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({\n  prompt: \"select_account\"\n});\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\nexport default firebase;","map":{"version":3,"sources":["D:/Web/Web/Udemy course/Complete React developer/e-commerce_shop/src/firebase/firebase.utils.js"],"names":["firebase","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","initializeApp","createUserProfileDocument","userAuth","additionalData","userRef","firestore","doc","uid","collectionRef","collection","collectionSnapshot","get","snapShot","console","log","docs","map","data","exists","displayName","email","createdAt","Date","set","error","message","auth","addCollectionAndDocuments","collectionKey","objectsToAdd","provider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,cAArB;AACA,OAAO,oBAAP;AACA,OAAO,eAAP;AAEA,MAAMC,MAAM,GAAG;AACbC,EAAAA,MAAM,EAAE,yCADK;AAEbC,EAAAA,UAAU,EAAE,uCAFC;AAGbC,EAAAA,WAAW,EAAE,8CAHA;AAIbC,EAAAA,SAAS,EAAE,uBAJE;AAKbC,EAAAA,aAAa,EAAE,mCALF;AAMbC,EAAAA,iBAAiB,EAAE,cANN;AAObC,EAAAA,KAAK,EAAE,2CAPM;AAQbC,EAAAA,aAAa,EAAE;AARF,CAAf;AAWAT,QAAQ,CAACU,aAAT,CAAuBT,MAAvB;AAEA,OAAO,MAAMU,yBAAyB,GAAG,OAAOC,QAAP,EAAiBC,cAAjB,KAAoC;AAC3E,MAAI,CAACD,QAAL,EAAe;AAEf,QAAME,OAAO,GAAGC,SAAS,CAACC,GAAV,CAAe,SAAQJ,QAAQ,CAACK,GAAI,EAApC,CAAhB;AACA,QAAMC,aAAa,GAAGH,SAAS,CAACI,UAAV,CAAqB,OAArB,CAAtB;AACA,QAAMC,kBAAkB,GAAG,MAAMF,aAAa,CAACG,GAAd,EAAjC;AAEA,QAAMC,QAAQ,GAAG,MAAMR,OAAO,CAACO,GAAR,EAAvB;AACAE,EAAAA,OAAO,CAACC,GAAR,CAAY;AAAEL,IAAAA,UAAU,EAAEC,kBAAkB,CAACK,IAAnB,CAAwBC,GAAxB,CAA6BV,GAAD,IAASA,GAAG,CAACW,IAAJ,EAArC;AAAd,GAAZ;;AACA,MAAI,CAACL,QAAQ,CAACM,MAAd,EAAsB;AACpB,UAAM;AAAEC,MAAAA,WAAF;AAAeC,MAAAA;AAAf,QAAyBlB,QAA/B;AACA,UAAMmB,SAAS,GAAG,IAAIC,IAAJ,EAAlB;;AACA,QAAI;AACF,YAAMlB,OAAO,CAACmB,GAAR,CAAY;AAChBJ,QAAAA,WADgB;AAEhBC,QAAAA,KAFgB;AAGhBC,QAAAA,SAHgB;AAIhB,WAAGlB;AAJa,OAAZ,CAAN;AAMD,KAPD,CAOE,OAAOqB,KAAP,EAAc;AACdX,MAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCU,KAAK,CAACC,OAAzC;AACD;AACF;;AAED,SAAOrB,OAAP;AACD,CAzBM;AA2BP,OAAO,MAAMsB,IAAI,GAAGpC,QAAQ,CAACoC,IAAT,EAAb;AACP,OAAO,MAAMrB,SAAS,GAAGf,QAAQ,CAACe,SAAT,EAAlB;AAEP,OAAO,MAAMsB,yBAAyB,GAAG,CAACC,aAAD,EAAgBC,YAAhB,KAAiC;AACxE,QAAMrB,aAAa,GAAGH,SAAS,CAACI,UAAV,CAAqBmB,aAArB,CAAtB;AACAf,EAAAA,OAAO,CAACC,GAAR;AACD,CAHM;AAKP,MAAMgB,QAAQ,GAAG,IAAIxC,QAAQ,CAACoC,IAAT,CAAcK,kBAAlB,EAAjB;AACAD,QAAQ,CAACE,mBAAT,CAA6B;AAAEC,EAAAA,MAAM,EAAE;AAAV,CAA7B;AACA,OAAO,MAAMC,gBAAgB,GAAG,MAAMR,IAAI,CAACS,eAAL,CAAqBL,QAArB,CAA/B;AAEP,eAAexC,QAAf","sourcesContent":["import firebase from \"firebase/app\";\r\nimport \"firebase/firestore\";\r\nimport \"firebase/auth\";\r\n\r\nconst config = {\r\n  apiKey: \"AIzaSyDzgZErucP_p3Rs4ilRpplnbsH-0Lj0_QA\",\r\n  authDomain: \"e-commerce-shop-dc68b.firebaseapp.com\",\r\n  databaseURL: \"https://e-commerce-shop-dc68b.firebaseio.com\",\r\n  projectId: \"e-commerce-shop-dc68b\",\r\n  storageBucket: \"e-commerce-shop-dc68b.appspot.com\",\r\n  messagingSenderId: \"950147081480\",\r\n  appId: \"1:950147081480:web:0cc1a095a0414651c2b8bd\",\r\n  measurementId: \"G-SJCNTMC2N4\",\r\n};\r\n\r\nfirebase.initializeApp(config);\r\n\r\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\r\n  if (!userAuth) return;\r\n\r\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\r\n  const collectionRef = firestore.collection(\"users\");\r\n  const collectionSnapshot = await collectionRef.get();\r\n\r\n  const snapShot = await userRef.get();\r\n  console.log({ collection: collectionSnapshot.docs.map((doc) => doc.data()) });\r\n  if (!snapShot.exists) {\r\n    const { displayName, email } = userAuth;\r\n    const createdAt = new Date();\r\n    try {\r\n      await userRef.set({\r\n        displayName,\r\n        email,\r\n        createdAt,\r\n        ...additionalData,\r\n      });\r\n    } catch (error) {\r\n      console.log(\"error creating user\", error.message);\r\n    }\r\n  }\r\n\r\n  return userRef;\r\n};\r\n\r\nexport const auth = firebase.auth();\r\nexport const firestore = firebase.firestore();\r\n\r\nexport const addCollectionAndDocuments = (collectionKey, objectsToAdd) => {\r\n  const collectionRef = firestore.collection(collectionKey);\r\n  console.log()\r\n}\r\n\r\nconst provider = new firebase.auth.GoogleAuthProvider();\r\nprovider.setCustomParameters({ prompt: \"select_account\" });\r\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\r\n\r\nexport default firebase;\r\n"]},"metadata":{},"sourceType":"module"}